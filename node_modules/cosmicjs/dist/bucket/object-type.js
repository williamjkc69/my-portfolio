"use strict";

var _require = require('../helpers/constants'),
    URI = _require.URI;

var HTTP_METHODS = require('../helpers/http_methods');

var _require2 = require('../helpers/request_handler'),
    requestHandler = _require2.requestHandler;

var objectTypeMethods = function objectTypeMethods(bucket_config) {
  return {
    getObjectTypes: function getObjectTypes(params) {
      var endpoint = "".concat(URI, "/").concat(bucket_config.slug, "/object-types?read_key=").concat(bucket_config.read_key);

      if (params && params.limit) {
        endpoint += "&limit=".concat(params.limit);
      }

      if (params && params.skip) {
        endpoint += "&skip=".concat(params.skip);
      }

      if (params && params.locale) {
        endpoint += "&locale=".concat(params.locale);
      }

      if (params && params.status) {
        endpoint += "&status=".concat(params.status);
      }

      return requestHandler(HTTP_METHODS.GET, endpoint);
    },
    // DEPRECATED
    getObjectsByType: function getObjectsByType(params) {
      var endpoint = "".concat(URI, "/").concat(bucket_config.slug, "/object-type/").concat(params.type_slug, "?read_key=").concat(bucket_config.read_key);

      if (params && params.limit) {
        endpoint += "&limit=".concat(params.limit);
      }

      if (params && params.skip) {
        endpoint += "&skip=".concat(params.skip);
      }

      if (params && params.locale) {
        endpoint += "&locale=".concat(params.locale);
      }

      if (params && params.status) {
        endpoint += "&status=".concat(params.status);
      }

      return requestHandler(HTTP_METHODS.GET, endpoint);
    },
    // DEPRECATED
    searchObjectType: function searchObjectType(params) {
      var searchParams = "/search?metafield_key=".concat(params.metafield_key);

      if (params.metafield_value) {
        searchParams += "&metafield_value=".concat(params.metafield_value);
      } else if (params.metafield_object_slug) {
        searchParams += "&metafield_object_slug=".concat(params.metafield_object_slug);
      } else {
        searchParams += "&metafield_value_has=".concat(params.metafield_value_has);
      }

      var endpoint = "".concat(URI, "/").concat(bucket_config.slug, "/object-type/").concat(params.type_slug).concat(searchParams, "&read_key=").concat(bucket_config.read_key);

      if (params && params.limit) {
        endpoint += "&limit=".concat(params.limit);
      }

      if (params && params.skip) {
        endpoint += "&skip=".concat(params.skip);
      }

      if (params && params.sort) {
        endpoint += "&sort=".concat(params.sort);
      }

      if (params && params.locale) {
        endpoint += "&locale=".concat(params.locale);
      }

      if (params && params.status) {
        endpoint += "&status=".concat(params.status);
      }

      return requestHandler(HTTP_METHODS.GET, endpoint);
    },
    addObjectType: function addObjectType(params) {
      var endpoint = "".concat(URI, "/").concat(bucket_config.slug, "/add-object-type");

      if (bucket_config.write_key) {
        params.write_key = bucket_config.write_key;
      }

      return requestHandler(HTTP_METHODS.POST, endpoint, params);
    },
    editObjectType: function editObjectType(params) {
      var endpoint = "".concat(URI, "/").concat(bucket_config.slug, "/edit-object-type");

      if (bucket_config.write_key) {
        params.write_key = bucket_config.write_key;
      }

      return requestHandler(HTTP_METHODS.PUT, endpoint, params);
    },
    deleteObjectType: function deleteObjectType(params) {
      var endpoint = "".concat(URI, "/").concat(bucket_config.slug, "/object-types/").concat(params.slug);
      return requestHandler(HTTP_METHODS.DELETE, endpoint, bucket_config);
    }
  };
};

module.exports = objectTypeMethods;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,